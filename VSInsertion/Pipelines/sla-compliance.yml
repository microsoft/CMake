# This Yaml Document has been converted by ESAI Yaml Pipeline Conversion Tool.
# Please make sure to check all the converted content, it is your team's responsibility to make sure that the pipeline is still valid and functions as expected.
# This pipeline will be extended to the OneESPT template
# If you are not using the E+D shared hosted pool with windows-2022, replace the pool section with your hosted pool, os, and image name. If you are using a Linux image, you must specify an additional windows image for SDL: https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/1es-pipeline-templates/features/sdlanalysis/overview#how-to-specify-a-windows-pool-for-the-sdl-source-analysis-stage
trigger: none

schedules:
- cron: 0 4 * * 3
  branches:
    include:
    - refs/heads/cmake-daemon
    - refs/heads/dev/debugger
  always: true

name: $(date:yyyyMMdd)$(rev:.r)

resources:
  repositories:
  - repository: self
    type: git
    ref: refs/heads/cmake-daemon
  - repository: MicroBuildTemplate
    type: git
    name: 1ESPipelineTemplates/MicroBuildTemplate
    ref: refs/tags/release

variables:
- name: BuildConfiguration
  value: RelWithDebInfo
- name: BuildPlatform
  value: Any CPU
- name: CMakeBuildDirectory
  value: $(Build.ArtifactStagingDirectory)/build
- name: CMakeInstallDirectory
  value: $(Build.ArtifactStagingDirectory)/output
- name: Codeql.Enabled
  value: true
- name: Codeql.TSAEnabled
  value: true
- name: Codeql.TSAOptionsPath
  value: $(Agent.BuildDirectory)/config.gdntsa
- name: DisableDockerDetector
  value: true
- name: PackagingSolutionRoot
  value: $(Build.ArtifactStagingDirectory)/VSInsertion/Packaging
- name: PYTHONUTF8
  value: 1
- name: SigningSolutionRoot
  value: $(Build.ArtifactStagingDirectory)/VSInsertion/Signing
- name: SymbolsDirectory
  value: $(Build.ArtifactStagingDirectory)/symbols

extends:
  template: azure-pipelines/MicroBuild.1ES.Official.yml@MicroBuildTemplate
  parameters:
    pool:
      name: VSEngSS-MicroBuild2022-1ES
    sdl:
      sourceAnalysisPool:
        name: VSEngSS-MicroBuild2022-1ES
      policheck:
        enabled: true
      tsa:
        enabled: true
      prefast:
        enabled: true
        userProvideBuildInfo: auto
        setupCommandlinePicker: vs2022
    customBuildTags:
    - ES365AIMigrationTooling
    stages:
    - stage: stage
      jobs:
      - job: Phase_1
        displayName: CMake x64 Build and Test
        timeoutInMinutes: 360
        cancelTimeoutInMinutes: 1
        steps:
        - checkout: self
          clean: true
          fetchTags: false
          persistCredentials: True
        - task: CMake@1
          name: CMake1
          displayName: CMake x64 Cache Generation
          inputs:
            cwd: $(CMakeBuildDirectory)
            cmakeArgs: -DCMAKE_INSTALL_PREFIX:PATH=$(CMakeInstallDirectory) -DCMAKE_CONFIGURATION_TYPES=$(BuildConfiguration) -DCMake_VERSION_MICROSOFT_SCHEME=true -DCMake_VERSION_NO_GIT=true -DMicrosoft_CMake_VERSION_PATCH=$(Build.BuildNumber) $(Build.SourcesDirectory) -DCMAKE_CXX_FLAGS_INIT="/W3 /Qspectre /guard:cf /ZH:SHA_256" -DCMAKE_C_FLAGS_INIT="/W3 /Qspectre /guard:cf /ZH:SHA_256" -DCMAKE_EXE_LINKER_FLAGS_INIT="/incremental:no /profile /guard:cf /CETCOMPAT"  "-DCMake_DEFAULT_RECURSION_LIMIT=100" -S $(Build.SourcesDirectory) -B $(CMakeBuildDirectory) -DCPACK_BINARY_NSIS=OFF -DCPACK_BINARY_ZIP=ON -DCPACK_PACKAGE_FILE_NAME=cmake_install_x64
        - task: CMake@1
          name: CMake2
          displayName: CMake x64 Build Install and Package
          inputs:
            cwd: $(CMakeBuildDirectory)
            cmakeArgs: --build . --target package install --config $(BuildConfiguration) -- -m
        - task: MSBuild@1
          displayName: Build solution $(CMakeBuildDirectory)/package.vcxproj
          inputs:
            solution: $(CMakeBuildDirectory)/package.vcxproj
            msbuildArchitecture: x64
            platform: x64
            configuration: $(BuildConfiguration)
            clean: true
            createLogFile: true
            logFileVerbosity: diagnostic
        - task: MSBuild@1
          displayName: Build solution $(CMakeBuildDirectory)/install.vcxproj
          inputs:
            solution: $(CMakeBuildDirectory)/install.vcxproj
            msbuildArchitecture: x64
            platform: x64
            configuration: $(BuildConfiguration)
            createLogFile: true
            logFileVerbosity: diagnostic
        - task: PowerShell@2
          displayName: Generate TSA config
          inputs:
            targetType: inline
            script: |
              $configName = "config.gdntsa"
              $config = @"
              {
                  "tsaVersion": "TsaV2",
                  "tsaStamp": "DevDiv",
                  "tsaEnvironment": "PROD",
                  "codebase": "NewOrUpdate",
                  "codebaseName": "MicrosoftCMake_cmake-daemon",
                  "notificationAliases": [
                      "cmake@microsoft.com"
                  ],
                  "codebaseAdmins": [
                      "NORTHAMERICA\\itodirel"
                  ],
                  "instanceUrl": "https://devdiv.visualstudio.com",
                  "projectName": "DevDiv",
                  "areaPath": "DevDiv\\Cpp Developer Experience\\Cross Platform\\CMake\\Upstream",
                  "iterationPath": "DevDiv\\Future Backlog",
                  "allTools": true,
                  "repositoryName": "MicrosoftCMake_cmake-daemon"
              }
              "@
              Out-File -FilePath "$(Agent.BuildDirectory)/$configName" -InputObject $config
